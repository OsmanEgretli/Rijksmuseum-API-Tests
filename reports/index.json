{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 5,
    "pending": 0,
    "failures": 3,
    "start": "2025-03-21T17:40:22.923Z",
    "end": "2025-03-21T17:40:28.954Z",
    "duration": 6031,
    "testsRegistered": 8,
    "passPercent": 62.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "625ab946-0ac0-4515-826d-cc51ecad7f7c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "87cc1289-9e51-455c-b9df-df2edfc01b31",
          "title": "Rijksmuseum API Edge Case Tests",
          "fullFile": "/Users/oegretli/Desktop/RestAssured/tests/integration/edgeCases.test.js",
          "file": "/tests/integration/edgeCases.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aa5eb48a-9a75-4c1f-bdb0-6e57ad8e4439",
              "title": "Error Handling",
              "fullFile": "/Users/oegretli/Desktop/RestAssured/tests/integration/edgeCases.test.js",
              "file": "/tests/integration/edgeCases.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 400 for malformed request",
                  "fullTitle": "Rijksmuseum API Edge Case Tests Error Handling should return 400 for malformed request",
                  "timedOut": false,
                  "duration": 1333,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(BASE_URL)\n    .get('/collection')\n    .query({\n        key: API_KEY,\n        format: 'json',\n        p: 'invalid_page'\n    });\nexpect(response.status).to.equal(400);\nexpect(response.body).to.have.property('error');",
                  "err": {
                    "message": "AssertionError: expected 200 to equal 400",
                    "estack": "AssertionError: expected 200 to equal 400\n    at Context.<anonymous> (tests/integration/edgeCases.test.js:22:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 200\n+ 400\n"
                  },
                  "uuid": "586a67d8-5eae-4282-9c9a-d9ffda5f52d0",
                  "parentUUID": "aa5eb48a-9a75-4c1f-bdb0-6e57ad8e4439",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existent endpoint",
                  "fullTitle": "Rijksmuseum API Edge Case Tests Error Handling should return 404 for non-existent endpoint",
                  "timedOut": false,
                  "duration": 553,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(BASE_URL)\n    .get('/nonexistent')\n    .query({\n        key: API_KEY,\n        format: 'json'\n    });\nexpect(response.status).to.equal(404);",
                  "err": {},
                  "uuid": "1867b839-737b-4d5f-8b6f-bf72d5eeade7",
                  "parentUUID": "aa5eb48a-9a75-4c1f-bdb0-6e57ad8e4439",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1867b839-737b-4d5f-8b6f-bf72d5eeade7"
              ],
              "failures": [
                "586a67d8-5eae-4282-9c9a-d9ffda5f52d0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1886,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d110808c-a688-4e81-9eb3-8fc014718c22",
              "title": "Boundary Testing",
              "fullFile": "/Users/oegretli/Desktop/RestAssured/tests/integration/edgeCases.test.js",
              "file": "/tests/integration/edgeCases.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle pagination at the first page",
                  "fullTitle": "Rijksmuseum API Edge Case Tests Boundary Testing should handle pagination at the first page",
                  "timedOut": false,
                  "duration": 1268,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(BASE_URL)\n    .get('/collection')\n    .query({\n        key: API_KEY,\n        format: 'json',\n        p: 1,\n        ps: 10\n    });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('artObjects');",
                  "err": {},
                  "uuid": "3badc981-ebf6-42fe-b775-3b1fe09c720d",
                  "parentUUID": "d110808c-a688-4e81-9eb3-8fc014718c22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle pagination at a high page number",
                  "fullTitle": "Rijksmuseum API Edge Case Tests Boundary Testing should handle pagination at a high page number",
                  "timedOut": false,
                  "duration": 1163,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(BASE_URL)\n    .get('/collection')\n    .query({\n        key: API_KEY,\n        format: 'json',\n        p: 1000,\n        ps: 10\n    });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('artObjects');",
                  "err": {},
                  "uuid": "55237513-568a-4e74-8c37-f4ed82f540a7",
                  "parentUUID": "d110808c-a688-4e81-9eb3-8fc014718c22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3badc981-ebf6-42fe-b775-3b1fe09c720d",
                "55237513-568a-4e74-8c37-f4ed82f540a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2431,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d5139647-e9bb-4d94-9eb9-0c117e93ea36",
          "title": "Rijksmuseum API Tests",
          "fullFile": "/Users/oegretli/Desktop/RestAssured/tests/integration/rijksmuseum.test.js",
          "file": "/tests/integration/rijksmuseum.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Rijksmuseum API Tests\"",
              "fullTitle": "Rijksmuseum API Tests \"before each\" hook in \"Rijksmuseum API Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "startTime = Date.now();",
              "err": {},
              "uuid": "f0ed8abb-6fe6-459c-84eb-f153eef9ac8c",
              "parentUUID": "d5139647-e9bb-4d94-9eb9-0c117e93ea36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Rijksmuseum API Tests\"",
              "fullTitle": "Rijksmuseum API Tests \"after each\" hook in \"Rijksmuseum API Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const duration = Date.now() - startTime;\nconsole.log(`Test duration: ${duration}ms`);",
              "err": {},
              "uuid": "8ab9c182-3518-4efc-ae71-bc4e07c7cf36",
              "parentUUID": "d5139647-e9bb-4d94-9eb9-0c117e93ea36",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e9bc63ce-6e54-47b9-b2ed-7b5277f609ef",
              "title": "Collection Endpoints",
              "fullFile": "/Users/oegretli/Desktop/RestAssured/tests/integration/rijksmuseum.test.js",
              "file": "/tests/integration/rijksmuseum.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get collection items with pagination and validate response structure",
                  "fullTitle": "Rijksmuseum API Tests Collection Endpoints should get collection items with pagination and validate response structure",
                  "timedOut": false,
                  "duration": 1151,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(BASE_URL)\n    .get('/collection')\n    .query({\n        key: API_KEY,\n        format: 'json',\n        p: 1,\n        ps: 10\n    });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('artObjects');\nexpect(response.body.artObjects).to.be.an('array');\nexpect(response.body.artObjects.length).to.be.at.most(10);\n\n// Additional validation for response structure\nif (response.body.artObjects.length > 0) {\n    const firstItem = response.body.artObjects[0];\n    expect(firstItem).to.have.property('id');\n    expect(firstItem).to.have.property('objectNumber');\n    expect(firstItem).to.have.property('title');\n}",
                  "err": {},
                  "uuid": "0d05b2c8-f774-4520-af86-11ffb072f1cf",
                  "parentUUID": "e9bc63ce-6e54-47b9-b2ed-7b5277f609ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get specific artwork details and validate all required fields",
                  "fullTitle": "Rijksmuseum API Tests Collection Endpoints should get specific artwork details and validate all required fields",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const objectNumber = 'SK-C-5'; // The Night Watch\nresponse = await request(BASE_URL)\n    .get(`/collection/${objectNumber}`)\n    .query({\n        key: API_KEY,\n        format: 'json'\n    });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('artObject');\n\nconst artObject = response.body.artObject;\nexpect(artObject).to.have.property('objectNumber', objectNumber);\nexpect(artObject).to.have.property('title');\nexpect(artObject).to.have.property('principalMaker');\nexpect(artObject).to.have.property('longTitle');\nexpect(artObject).to.have.property('webImage');\n\n// Validate webImage structure\nif (artObject.webImage) {\n    expect(artObject.webImage).to.have.property('url');\n    expect(artObject.webImage).to.have.property('width');\n    expect(artObject.webImage).to.have.property('height');\n}",
                  "err": {},
                  "uuid": "136dc5cb-4b73-4ee6-bbe2-afcf902a2574",
                  "parentUUID": "e9bc63ce-6e54-47b9-b2ed-7b5277f609ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should search collection with multiple parameters and validate search results",
                  "fullTitle": "Rijksmuseum API Tests Collection Endpoints should search collection with multiple parameters and validate search results",
                  "timedOut": false,
                  "duration": 225,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(BASE_URL)\n    .get('/collection')\n    .query({\n        key: API_KEY,\n        format: 'json',\n        q: 'Rembrandt',\n        type: 'painting',\n        p: 1,\n        ps: 20\n    });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('artObjects');\nexpect(response.body.artObjects).to.be.an('array');\n\n// Validate search results\nif (response.body.artObjects.length > 0) {\n    const firstResult = response.body.artObjects[0];\n    expect(firstResult).to.have.property('title');\n    expect(firstResult).to.have.property('objectNumber');\n    expect(firstResult).to.have.property('principalMaker');\n    \n    // Validate search relevance\n    expect(firstResult.title.toLowerCase()).to.include('rembrandt');\n}",
                  "err": {
                    "message": "AssertionError: expected { links: { …(2) }, …(11) } to have property 'principalMaker'",
                    "estack": "AssertionError: expected { links: { …(2) }, …(11) } to have property 'principalMaker'\n    at Context.<anonymous> (tests/integration/rijksmuseum.test.js:95:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "9fd21fa6-c68c-4ac8-b05c-a10f3e939466",
                  "parentUUID": "e9bc63ce-6e54-47b9-b2ed-7b5277f609ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle invalid API key and validate error response",
                  "fullTitle": "Rijksmuseum API Tests Collection Endpoints should handle invalid API key and validate error response",
                  "timedOut": false,
                  "duration": 112,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(BASE_URL)\n    .get('/collection')\n    .query({\n        key: 'invalid_key',\n        format: 'json'\n    });\nexpect(response.status).to.equal(401);\nexpect(response.body).to.have.property('error');\nexpect(response.body.error).to.be.a('string');",
                  "err": {
                    "message": "AssertionError: expected 'Invalid key' to have property 'error'",
                    "estack": "AssertionError: expected 'Invalid key' to have property 'error'\n    at Context.<anonymous> (tests/integration/rijksmuseum.test.js:111:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "8039b775-2cd3-4ce1-ac3c-3c4274957926",
                  "parentUUID": "e9bc63ce-6e54-47b9-b2ed-7b5277f609ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d05b2c8-f774-4520-af86-11ffb072f1cf",
                "136dc5cb-4b73-4ee6-bbe2-afcf902a2574"
              ],
              "failures": [
                "9fd21fa6-c68c-4ac8-b05c-a10f3e939466",
                "8039b775-2cd3-4ce1-ac3c-3c4274957926"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1702,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "index",
        "inlineAssets": "true",
        "charts": "true",
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}